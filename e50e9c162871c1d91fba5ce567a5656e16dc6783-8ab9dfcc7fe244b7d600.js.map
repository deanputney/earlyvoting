{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/components/state-row.js","webpack:///./src/components/time-quip-row.js","webpack:///./src/components/state-gantt.js","webpack:///./src/components/layout.js"],"names":["StateSelect","props","state","data","handleChange","bind","self","ReferenceError","e","targetValue","target","value","window","location","href","render","onChange","this","allGoogleSheetVaApiDataRow","nodes","map","stateSelectOption","Component","statePage","statePageUri","stateSlug","fullStateName","StateSelectDiv","Fragment","className","class","Header","siteTitle","query","StateRow","row","earlyVotingStartDate","earlyVotingEndDate","endDate","parseDate","year2020EarlyVotingEndsCombined","startDate","year2020EarlyVotingStartsCombined","shortStartDate","month","date","daysToVote","dateDiffInDays","to","colspan","daysToStart","TimeQuipRow","quip","align","electionDate","quips","42","30","20","14","10","usedQuips","layoutStateRows","stateData","chartStartDate","days","includes","push","StateGantt","allGoogleSheetEarlyVotingDataRow","Layout","children"],"mappings":"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","file":"e50e9c162871c1d91fba5ce567a5656e16dc6783-8ab9dfcc7fe244b7d600.js","sourcesContent":["import React, { Component } from 'react';\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport './style.scss';\n\nimport voteAmericaLogo from '../images/vote-america-logo.png';\nimport Navbar from './navbar';\n\nimport { statePageUri } from '../lib/common';\n\nclass StateSelect extends Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n\n    }; // initialise state\n    this.data = props.data;\n\n\t\t// Make sure to bind handleChange or you can make use of arrow function\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const targetValue = e.target.value;\n\n\t\t// Then you can do whatever you want to do with the value\n\t\twindow.location.href = targetValue;\n  }\n\n  render() {\n  \treturn (\n\t\t\t<select onChange={ this.handleChange }>\n\t\t\t  <option>YOUR STATE</option>\n\t      {\n\t        this.data.allGoogleSheetVaApiDataRow.nodes.map(stateSelectOption)\n\t      }\n\t\t\t</select>\n\t\t);\n  }\n}\n\nconst stateSelectOption = (data) => {\n\tvar statePage = statePageUri(data.stateSlug);\n\n\treturn (\n\t\t<option value={ statePage }>{ data.fullStateName }</option>\n\t);\n}\n\nconst StateSelectDiv = ({ data }) => (\n\t<React.Fragment>\n\t\t<p className=\"subtitle has-text-white is-size-3 is-hidden-mobile\">\n\t\t\tI vote in\n\t\t\t<div class=\"select is-medium is-primary state-dropdown\">\n\t\t\t\t<StateSelect data={ data } />\n\t\t\t</div>\n\t\t\tand I'm ready to get this over with!\n\t\t</p>\n\n\t\t<p className=\"subtitle has-text-white is-size-3 is-hidden-desktop\">\n\t\t\tI vote in\n\t\t\t<div class=\"select is-medium is-primary state-dropdown\">\n\t\t\t\t<StateSelect data={ data } />\n\t\t\t</div>\n\t\t</p>\n\t</React.Fragment>\n)\n\nconst Header = ({ siteTitle }) => (\n\t<section className=\"hero gradientBg is-halfheight\">\n\t\t<div className=\"hero-body\">\n\t\t\t<div className=\"container center\">\n\t\t\t\t<article className=\"media\">\n\t\t\t\t\t<div className=\"media-content\">\n\t\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t\t<h1 className=\"is-uppercase is-size-1 has-text-white\">\n\t\t\t\t\t\t\t\tYou can vote early in <span class=\"hilight\">41 states</span>.\n\t\t\t\t\t\t\t</h1>\n\n\t\t\t\t\t\t\t<StaticQuery\n\t\t\t\t\t\t\tquery={graphql`\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tallGoogleSheetVaApiDataRow {\n\t\t\t\t\t\t\t\t\t  nodes {\n\t\t\t\t\t\t\t\t\t  \tstateSlug\n\t\t\t\t\t\t\t\t\t    fullStateName\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\trender={data => (\n\t\t\t\t\t\t\t\t<StateSelectDiv data={ data } />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n);\n\nexport default Header;\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from 'react';\nimport { Link } from 'gatsby';\nimport './style.scss';\nimport { statePageUri } from '../lib/common';\nimport { dateDiffInDays, parseDate } from '../lib/dates';\n\n\nconst cantDisplayStateRow = (row) => {\n  return (row.earlyVotingStartDate === null) || (row.earlyVotingEndDate === null)\n}\n\n\nconst StateRow = (data) => {\n  data = data.data\n  if (cantDisplayStateRow(data)) {\n    return null\n  }\n\n  var statePage = statePageUri(data.fullStateName);\n\n  var endDate = parseDate(data.year2020EarlyVotingEndsCombined)\n  var startDate = parseDate(data.year2020EarlyVotingStartsCombined)\n\n  data.shortStartDate = (startDate.month() + 1) + '/' + startDate.date()\n\n  const daysToVote = dateDiffInDays(startDate, endDate)\n\n  if ((data.daysToVote < 1) || (endDate === null)) {\n    return null\n  }\n\n  // The first colspan is how far from left to offset the start of the bar.\n  // This corresponds to how many days from TODAY is the beginning of the voting period.\n  // The second colspan is how long the voting period is.\n\n  if (data.daysToVote < 3) {\n    return (\n      <tr>\n        <th><Link to={statePage}>{data.fullStateName}</Link></th>\n        <td colspan={data.daysToStart} class=\"bar-spacer\">{data.shortStartDate}</td>\n        <td colspan={daysToVote} class=\"bar\">\n          <Link to={statePage}>\n            <div class=\"bar-content\"></div>\n          </Link>\n        </td>\n      </tr>\n    )\n  }\n\n  const minMobileDays = 12\n\n  return (\n    <tr>\n      <th><Link to={statePage}>{data.fullStateName}</Link></th>\n      <td colspan={data.daysToStart} class=\"bar-spacer\">\n        <span class={(\n          () => {\n            if (data.daysToVote < minMobileDays) { return 'date is-hidden-tablet' }\n            return 'date is-hidden'\n          }\n        )()} >{data.shortStartDate}</span>\n      </td>\n      <td colspan={daysToVote} class=\"bar\">\n        <Link to={statePage}>\n          <div class=\"bar-content\">\n            <span class={(\n              () => {\n                if (data.daysToVote < minMobileDays) { return 'date is-hidden-mobile' }\n                return 'date'\n              }\n            )()}>{data.shortStartDate}</span>\n          </div>\n        </Link>\n      </td>\n    </tr>\n  )\n};\n\nexport default StateRow;\n","import React from 'react';\nimport './style.scss';\n\nconst TimeQuipRow = (data) => {\n  const quip = data.quip\n  data = data.data\n\n  // The first colspan is how far from left to offset the start of the bar.\n  // This corresponds to how many days from TODAY is the beginning of the voting period.\n  // The second colspan is how long the voting period is.\n  return (\n    <React.Fragment>\n      <tr class=\"is-hidden-touch\">\n        <th></th>\n        <td colspan={data.daysToStart}></td>\n        <td colspan={data.daysToVote} class=\"quip\">{quip}</td>\n      </tr>\n      <tr class=\"is-hidden-desktop\">\n        <td colspan=\"47\" class=\"quip\" align=\"right\">{quip}</td>\n      </tr>\n    </React.Fragment>\n  )\n};\n\nexport default TimeQuipRow;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby'\nimport StateRow from './state-row';\nimport TimeQuipRow from './time-quip-row';\nimport './style.scss';\nimport {todaysDate, parseDate, dateDiffInDays} from '../lib/dates';\n\nconst electionDate = parseDate('2020-11-03')\nlet quips = {\n  42: 'You could do a Couch to 5K if you saved this much time.',\n  30: 'Voting now would save you a whole month.',\n  20: 'This is three whole weekends off.',\n  14: 'Two weeks of bliss.',\n  10: 'Still worth it!'\n}\nlet usedQuips = []\n\nfunction layoutStateRows(stateData) {\n  const startDate = parseDate(stateData.year2020EarlyVotingStartsCombined)\n  const chartStartDate = parseDate('2020-09-17')\n  const days = dateDiffInDays(startDate, electionDate)\n  stateData.daysToStart = dateDiffInDays(chartStartDate, startDate)\n\n  if (quips[days] != null && !usedQuips.includes(days)) {\n    usedQuips.push(days)\n\n    return (\n      <React.Fragment>\n        <TimeQuipRow quip={quips[days]} data={stateData} />\n        <StateRow data={stateData} />\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <StateRow data={stateData} />\n    </React.Fragment>\n  )\n}\n\nconst StateGantt = () => (\n  <StaticQuery\n  query={graphql`\n    {\n      allGoogleSheetEarlyVotingDataRow {\n        nodes {\n          year2020EarlyVotingStartsCombined\n          year2020EarlyVotingEndsCombined\n          fullStateName\n          daysToVote\n        }\n      }\n    }\n  `}\n  render={data => (\n    <div class=\"columns\">\n      <div class=\"column gantt-column is-10-desktop is-offset-1-desktop is-fullwidth-mobile\">\n        <table class=\"gantt table is-fullwidth\">\n          <thead>\n            <th></th>\n            <td colspan=\"45\" align=\"right\">Election Day is November 3rd</td>\n          </thead>\n          <tr>\n            <td class=\"bars\" colspan=\"46\">\n              <table class=\"is-fullwidth is-fullwidth-mobile\">\n                {\n                  data.allGoogleSheetEarlyVotingDataRow.nodes.map(layoutStateRows)\n                }\n              </table>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  )}\n  />\n);\n\nexport default StateGantt;\n","import React from 'react';\n\nimport './style.scss';\nimport Helmet from './helmet';\nimport Header from './header';\nimport StateGantt from './state-gantt';\nimport SiteDescription from './site-description';\nimport Footer from './footer';\n\nconst Layout = ({ children }) => (\n\t<div>\n\t\t<Helmet />\n\t\t<Header />\n\n    <div>\n      <section className=\"section\">\n        <div className=\"container\">\n          <SiteDescription />\n\n          <StateGantt />\n        </div>\n      </section>\n    </div>\n\n\t\t<Footer />\n\t</div>\n);\n\nexport default Layout;\n"],"sourceRoot":""}